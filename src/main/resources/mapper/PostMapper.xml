<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.overflow.toy_project.mapper.PostMapper">
    <!-- 게시글 -->
    <resultMap id="PostResultMap" type="com.overflow.toy_project.model.Post">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="createAt" column="create_at"/>

        <association property="member" javaType="com.overflow.toy_project.model.Member">
            <id property="id" column="member_id"/>
            <result property="email" column="email"/>
            <result property="password" column="password"/>
            <result property="username" column="username"/>
        </association>
    </resultMap>

    <select id="selectAllPosts" resultMap="PostResultMap">
        SELECT
            p.id, p.title, p.content, p.create_at,
            m.id AS member_id, m.email, m.password, m.username
        FROM post p
        JOIN member m ON p.member_id = m.id
        ORDER BY p.create_at DESC
    </select>

    <select id="selectPostById" parameterType="long" resultMap="PostResultMap">
        SELECT
            p.id, p.title, p.content, p.create_at,
            m.id AS member_id, m.email, m.password, m.username
        FROM post p
        JOIN member m ON p.member_id = m.id
        WHERE p.id = #{id}
    </select>

    <insert id="insertPost" parameterType="com.overflow.toy_project.model.Post" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO post(member_id, title, content) VALUES(#{member.id}, #{title}, #{content})
    </insert>

    <update id="updatePost" parameterType="com.overflow.toy_project.model.Post">
        UPDATE post SET title = #{title}, content = #{content} WHERE id = #{id}
    </update>

    <delete id="deletePost" parameterType="long">
        DELETE FROM post WHERE id = #{id}
    </delete>

    <!-- 댓글 -->
    <resultMap id="CommentResultMap" type="com.overflow.toy_project.model.Comment">
        <id property="id" column="id"/>
        <result property="content" column="content"/>
        <result property="createAt" column="create_at"/>

        <association property="member" javaType="com.overflow.toy_project.model.Member">
            <id property="id" column="member_id"/>
            <result property="email" column="member_email"/>
            <result property="password" column="member_password"/>
            <result property="username" column="member_username"/>
        </association>
        <association property="post" javaType="com.overflow.toy_project.model.Post">
            <id property="id" column="post_id"/>
            <result property="title" column="post_title"/>
            <result property="content" column="post_content"/>
            <result property="createAt" column="post_create_at"/>

            <association property="member" javaType="com.overflow.toy_project.model.Member">
                <id property="id" column="post_member_id"/>
                <result property="email" column="post_member_email"/>
                <result property="password" column="post_member_password"/>
                <result property="username" column="post_member_username"/>
            </association>
        </association>
    </resultMap>

    <select id="selectCommentsByPostId" parameterType="long" resultMap="CommentResultMap">
        SELECT
            c.id, c.content, c.create_at,

            m.id AS member_id,
            m.email AS member_email,
            m.password AS member_password,
            m.username AS member_username,

            p.id AS post_id,
            p.title AS post_title,
            p.content AS post_content,
            p.create_at AS post_create_at,

            pm.id AS post_member_id,
            pm.email AS post_member_email,
            pm.password AS post_member_password,
            pm.username AS post_member_username
        FROM comment c
        JOIN member m ON c.member_id = m.id
        JOIN post p ON c.post_id = p.id
        JOIN member pm ON p.member_id = pm.id
        WHERE c.post_id = #{postId}
        ORDER BY c.create_at ASC
    </select>

    <insert id="insertComment" parameterType="com.overflow.toy_project.model.Comment">
        INSERT INTO comment(member_id, post_id, content) VALUES(#{member.id}, #{post.id}, #{content})
    </insert>

    <delete id="deleteComment" parameterType="long">
        DELETE FROM comment WHERE id = #{id}
    </delete>

    <delete id="deleteCommentAllByPostId" parameterType="long">
        DELETE FROM comment WHERE post_id = #{postId}
    </delete>
</mapper>